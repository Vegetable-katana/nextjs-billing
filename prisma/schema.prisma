generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}


// == Lemon Squeezy data

model Subscription {
  id             Int       @id @default(autoincrement())
  lemonSqueezyId Int       @unique
  orderId        Int       @unique
  name           String
  email          String
  status         String
  renewsAt       DateTime?
  endsAt         DateTime?
  trialEndsAt    DateTime?
  resumesAt      DateTime?
  pauseReason    String?
  price          Int
  plan           Plan      @relation(fields: [planId], references: [id])
  planId         Int
  user           User      @relation(fields: [userId], references: [id])
  userId         String

  @@index([planId, lemonSqueezyId])
}

model Plan {
  id            Int            @id @default(autoincrement())
  productId     Int
  variantId     Int            @unique
  name          String?        // Need to get from Product
  description   String?
  variantName   String
  sort          Int
  status        String
  price         Int
  interval      String
  intervalCount Int            @default(1)
  subscriptions Subscription[]
}

model WebhookEvent {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  eventName   String
  processed   Boolean   @default(false)
  body        Json
}


// == NextAuth.js

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}